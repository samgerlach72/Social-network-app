import { AuthToken } from "../domain/AuthToken";
import { Status } from "../domain/Status";
import { User } from "../domain/User";

export class TweeterResponse{
    readonly success: boolean;
    readonly message: string | undefined;

    constructor(success: boolean, message: string | undefined) {
        this.success = success;
        this.message = message;
    }
}

//for login and register
export class AuthenticateResponse extends TweeterResponse {
    readonly user: User | null;
    readonly token: AuthToken | null;

    constructor(user: User | null, token: AuthToken | null, success: boolean, message: string | undefined) {
        super(success, message);
        this.user = user;
        this.token = token;
    }
}

export class GetUserResponse extends TweeterResponse {
    readonly user: User | null;

    constructor(user: User | null, success: boolean, message: string | undefined) {
        super(success, message);
        this.user = user;
    }
}

//for load more feed, story, followers, or followees response
export class LoadFeedOrStoryResponse<T extends User | Status> extends TweeterResponse {
    readonly itemList: T[] | null; 
    readonly hasMoreItems: boolean | null;

    constructor(itemList: T[] | null, hasMoreItems: boolean | null, success: boolean, message: string | undefined) {
        super(success, message);
        this.itemList = itemList;
        this.hasMoreItems = hasMoreItems;
    }
}

export class GetIsFollowerStatusResponse extends TweeterResponse {
    readonly isFollower: boolean | null;

    constructor(isFollower: boolean | null, success: boolean, message: string | undefined){
        super(success, message);
        this.isFollower = isFollower;
    }
}

export class GetFollowerOrFolloweeCountResponse extends TweeterResponse {
    readonly count: number | null;

    constructor(count: number | null, success: boolean, message: string | undefined){
        super(success, message);
        this.count = count;
    }
}